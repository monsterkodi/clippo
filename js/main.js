// koffee 1.14.0

/*
00     00   0000000   000  000   000
000   000  000   000  000  0000  000
000000000  000000000  000  000 0 000
000 0 000  000   000  000  000  0000
000   000  000   000  000  000   000
 */
var _, activeApp, app, appIconSync, appName, buffers, childp, clearBuffer, clipboard, clippoWatch, copyIndex, deleteIndex, electron, empty, first, fs, getActiveApp, iconDir, kerror, macClipboardChanged, nativeImage, noon, onClipboardChanged, onWillShowWin, originApp, os, osascript, pasteIndex, pkg, post, prefs, quit, readBuffer, ref, reload, saveAppIcon, saveBuffer, slash, watchClipboard, winClipboardChanged;

ref = require('kxk'), _ = ref._, app = ref.app, childp = ref.childp, empty = ref.empty, first = ref.first, fs = ref.fs, kerror = ref.kerror, noon = ref.noon, os = ref.os, osascript = ref.osascript, post = ref.post, prefs = ref.prefs, slash = ref.slash;

electron = require('electron');

pkg = require('../package.json');

if (os.platform() === 'darwin') {
    appIconSync = require('./appiconsync');
}

app = new app({
    dir: __dirname,
    pkg: pkg,
    shortcut: 'CmdOrCtrl+Alt+V',
    index: 'index.html',
    icon: '../img/app.ico',
    tray: '../img/menu@2x.png',
    about: '../img/about.png',
    onQuit: function() {
        return quit();
    },
    onWillShowWin: function() {
        return onWillShowWin();
    },
    width: 1000,
    height: 1200,
    minWidth: 300,
    minHeight: 200
});

clipboard = electron.clipboard;

nativeImage = electron.nativeImage;

buffers = [];

iconDir = "";

activeApp = "";

originApp = null;

clippoWatch = null;

appName = 'clippo';

post.on('paste', function(index) {
    return pasteIndex(index);
});

post.on('del', function(index) {
    return deleteIndex(index);
});

post.onGet('buffers', function() {
    return buffers;
});

post.on('clearBuffer', function() {
    return clearBuffer();
});

getActiveApp = function() {
    var info, script, wxw;
    if (os.platform() === 'win32') {
        wxw = require('wxw');
        info = first(wxw('info', 'top'));
        appName = slash.base(info.path);
    } else if (os.platform() === 'darwin') {
        script = osascript("tell application \"System Events\"\n    set n to name of first application process whose frontmost is true\nend tell\ndo shell script \"echo \" & n");
        appName = childp.execSync("osascript " + script);
        appName = String(appName).trim();
    }
    return appName;
};

saveAppIcon = function(appName) {
    var iconPath, png;
    iconPath = iconDir + "/" + appName + ".png";
    if (!slash.isFile(iconPath)) {
        png = appIconSync(appName, iconDir, 128);
        if (!png) {
            appName = "clippo";
        }
    }
    return appName;
};

onWillShowWin = function() {
    return activeApp = getActiveApp();
};

winClipboardChanged = function() {
    var exapp, exclude, i, iconPath, len, winInfo, wxw;
    wxw = require('wxw');
    appName = 'clippo';
    winInfo = first(wxw('info', 'top'));
    appName = slash.base(winInfo.path);
    exclude = prefs.get('exclude', ['password-turtle']);
    if (!empty(exclude)) {
        for (i = 0, len = exclude.length; i < len; i++) {
            exapp = exclude[i];
            if (appName.startsWith(exapp)) {
                return;
            }
        }
    }
    iconPath = iconDir + "/" + appName + ".png";
    if (!slash.isFile(iconPath)) {
        wxw('icon', winInfo.path, iconPath);
    }
    return onClipboardChanged();
};

macClipboardChanged = function() {
    var currentApp;
    currentApp = getActiveApp();
    if (currentApp.toLowerCase() === 'electron') {
        currentApp = 'clippo';
    }
    if ((!originApp) && (!currentApp)) {
        originApp = 'clippo';
    }
    appName = saveAppIcon(originApp != null ? originApp : currentApp);
    return onClipboardChanged();
};

onClipboardChanged = function() {
    var b, format, i, imageBuffer, imageData, j, k, len, len1, len2, ref1, text;
    ref1 = clipboard.availableFormats();
    for (i = 0, len = ref1.length; i < len; i++) {
        format = ref1[i];
        if (format.startsWith('image/')) {
            imageBuffer = clipboard.readImage().toPNG();
            imageData = imageBuffer.toString('base64');
            for (j = 0, len1 = buffers.length; j < len1; j++) {
                b = buffers[j];
                if ((b.image != null) && b.image === imageData) {
                    appName = b.app;
                    _.pull(buffers, b);
                    break;
                }
            }
            buffers.push({
                app: appName,
                image: imageData,
                count: buffers.length
            });
            reload(buffers.length - 1);
            return;
        }
    }
    text = clipboard.readText();
    if (text.length && text.trim().length) {
        for (k = 0, len2 = buffers.length; k < len2; k++) {
            b = buffers[k];
            if ((b.text != null) && b.text === text) {
                appName = b.app;
                _.pull(buffers, b);
                break;
            }
        }
        buffers.push({
            app: appName,
            text: text,
            count: buffers.length - 1
        });
        return reload(buffers.length - 1);
    }
};

watchClipboard = function() {
    var cw;
    cw = require('electron-clipboard-watcher');
    if (os.platform() === 'win32') {
        return cw({
            watchDelay: 200,
            onImageChange: winClipboardChanged,
            onTextChange: winClipboardChanged
        });
    } else {
        return cw({
            watchDelay: 200,
            onImageChange: macClipboardChanged,
            onTextChange: macClipboardChanged
        });
    }
};

copyIndex = function(index) {
    var image;
    if ((index < 0) || (index > buffers.length - 1)) {
        return;
    }
    if (buffers[index].image) {
        image = nativeImage.createFromBuffer(new Buffer(buffers[index].image, 'base64'));
        if (!image.isEmpty() && (image.getSize().width * image.getSize().height > 0)) {
            clipboard.writeImage(image, 'image/png');
        }
    }
    if ((buffers[index].text != null) && (buffers[index].text.length > 0)) {
        return clipboard.writeText(buffers[index].text, 'text/plain');
    }
};

pasteIndex = function(index) {
    var paste, ref1, wxw;
    copyIndex(index);
    originApp = (ref1 = buffers.splice(index, 1)[0]) != null ? ref1.app : void 0;
    if (os.platform() === 'win32') {
        wxw = require('wxw');
        paste = function() {
            if (activeApp === 'mintty') {
                return wxw('key', 'ctrl+shift+v');
            } else {
                return wxw('key', 'ctrl+v');
            }
        };
        app.win.close();
        return setTimeout(paste, 20);
    } else if (os.platform() === 'darwin') {
        childp.execSync("osascript " + osascript("tell application \"System Events\" to keystroke tab using command down"));
        return childp.execSync("osascript " + osascript("tell application \"System Events\" to keystroke \"v\" using command down"));
    }
};

deleteIndex = function(index) {
    buffers.splice(index, 1);
    return reload(index - 1);
};

quit = function() {
    saveBuffer();
    return clippoWatch != null ? clippoWatch.kill() : void 0;
};

reload = function(index) {
    if (index == null) {
        index = 0;
    }
    return post.toWins('loadBuffers', buffers, index);
};

clearBuffer = function() {
    buffers = [];
    saveBuffer();
    return reload();
};

saveBuffer = function() {
    return noon.save(app.userData + "/buffers.noon", buffers.slice(-prefs.get('maxBuffers', 50)));
};

readBuffer = function() {
    try {
        buffers = noon.load(slash.path(app.userData + "/buffers.noon"));
        return buffers = buffers != null ? buffers : [];
    } catch (error) {
        return buffers = [];
    }
};

post.on('appReady', function() {
    var err;
    readBuffer();
    iconDir = slash.resolve(app.userData + "/icons");
    fs.ensureDirSync(iconDir);
    try {
        fs.accessSync(slash.join(iconDir, 'clippo.png'), fs.R_OK);
    } catch (error) {
        try {
            fs.copySync(__dirname + "/../img/clippo.png", slash.join(iconDir, 'clippo.png'));
        } catch (error) {
            err = error;
            kerror("can't copy clippo icon: " + err);
        }
    }
    return watchClipboard();
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/main.coffee